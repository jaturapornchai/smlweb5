---
interface BreadcrumbItem {
    name: string;
    url: string;
}

interface Props {
    items: BreadcrumbItem[];
}

const { items } = Astro.props;

// Generate structured data for breadcrumbs
const breadcrumbStructuredData = {
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": items.map((item, index) => ({
        "@type": "ListItem",
        "position": index + 1,
        "name": item.name,
        "item": item.url
    }))
};
---

<!-- Breadcrumb Navigation -->
<nav aria-label="Breadcrumb" class="bg-gray-50 py-3 border-b">
    <div class="container mx-auto px-4">
        <ol class="flex items-center space-x-2 text-sm">
            {items.map((item, index) => (
                <li class="flex items-center">
                    {index > 0 && (
                        <svg class="w-4 h-4 mx-2 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                        </svg>
                    )}
                    {index === items.length - 1 ? (
                        <span class="text-gray-500 font-medium" aria-current="page">{item.name}</span>
                    ) : (
                        <a 
                            href={item.url} 
                            class="text-blue-600 hover:text-blue-800 hover:underline transition-colors"
                        >
                            {item.name}
                        </a>
                    )}
                </li>
            ))}
        </ol>
    </div>
</nav>

<!-- Structured Data -->
<script type="application/ld+json" set:html={JSON.stringify(breadcrumbStructuredData)} />

<style>
    nav[aria-label="Breadcrumb"] ol {
        font-family: 'Noto Sans Thai', sans-serif;
    }
</style>
